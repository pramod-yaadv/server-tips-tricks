1. Overall performance of a Java application depends on four factors
   a. The design of the application
   b. The speed at which the virtual machine executes the Java bytecodes
   c. The speed at which the libraries that perform basic functional tasks execute (in native code)
   d. The speed of the underlying hardware and operating system (IO Operations)

2. Important JVM Parameters
   # Explicit Heap Memory – Xms and Xmx Options
	-Xms<heap size>[unit]   -Xmx<heap size>[unit]
	-XX:MaxMetaspaceSize=<metaspace size>[unit]
        -XX:NewSize=<young size>[unit] 
	-XX:MaxNewSize=<young size>[unit]

    # Garbage Collection
     	-XX:+UseSerialGC
      	-XX:+UseParallelGC
	-XX:+USeParNewGC
	-XX:+UseG1GC	

     # GC Logging
	-XX:+UseGCLogFileRotation 	
	-XX:NumberOfGCLogFiles=< number of log files > 
	-XX:GCLogFileSize=< file size >[ unit ]
	-Xloggc:/path/to/gc.log

      # Handling out of Memory
	-XX:+HeapDumpOnOutOfMemoryError 
	-XX:HeapDumpPath=./java_pid<pid>.hprof
	-XX:OnOutOfMemoryError="< cmd args >;< cmd args >" 
	-XX:+UseGCOverheadLimit

       # 32/64 Bit
	-d<OS bit>
	
       # Misc
	-server: enables “Server Hotspot VM”
	-XX:+UseStringDeduplication: Java 8u20 introduce parameter for reducing the unnecessary use of memory by creating many instances of the same String	
	-XX:+UseStringCache: enables caching of commonly allocated strings available in the String pool
	-XX:+OptimizeStringConcat: it optimizes String concatenation operations where possible
	-XX:+UseCompressedStrings: use a byte[] type for String objects which can be represented in pure ASCII format

	-XX:+UseLWPSynchronization: sets LWP (Light Weight Process) – based synchronization policy instead of thread-based synchronization
	-XX:LargePageSizeInBytes: sets the large page size used for the Java heap; 
	-XX:MaxHeapFreeRatio: sets the maximum percentage of heap free after GC to avoid shrinking.
	-XX:MinHeapFreeRatio: sets the minimum percentage of heap free after GC to avoid expansion;
	-XX:SurvivorRatio: Ratio of eden/survivor space size – for example, -XX:SurvivorRatio=6 sets the ratio between each survivor space and eden space to be 1:6,
	-XX:+UseLargePages: use large page memory if it is supported by the system; please note that OpenJDK 7 tends to crash if using this JVM parameter



3. Enable GC log : To Check for GC Performance

4. JVM memory Stats Commands
 # To find statistics of the behavior of the garbage collected heap.
   jstat -gc [insert-pid-here]
 # Present information about memory pool generation and space capabilities.
   jstat -gccapacity [insert-pid-here] 
 
 # Present the utilization of each generation as a percentage of its capacity. Useful to get an at a glance view of usage.
   jstat -gcutil [insert-pid-here] 	

5. JVM Heap Information in Detailed includes Memory Usage & Free & Allocated  (jcmd is more improved command in Java 8)
   jmap -heap <JAVA_PID>    
   jmap -heap <JAVA_PID> | egrep ":|used     ="

6. Class Specific Histogram of Java Heap for a Process [Class wise Memory Allocation]
   jmap -histo <JAVA_PID>

7. Histogram of Java Heap for a Core File
   jmap -histo /usr/bin/java core

8. To print class loader statistics for the Java heap	
   jmap -clstats <JAVA_PID>	

9. To take JVM Heap memory Dump 
   jmap -dump:live,format=b,file=/tmp/dump.hprof <pid>
   jcmd <pid> GC.heap_dump <file-path>

10. Print All Thread with Stack Trace
    jcmd <PID> Thread.print
    jstack <PID>
    jstack -F <PID>  # Use this If any Java thread in Hang state and not able to execute above command

11. Enable -verbose:gc : To get gc information whenever takes place
   e.g. [Full GC (System.gc())  434341K->368279K(1013632K), 0.5420611 secs]
	[GC (Allocation Failure)  279616K->146232K(1013632K), 0.3318607 secs]

	GC or Full GC => Type of Garbage Collection, To distinguish a minor or full garbage collection
	(Allocation Failure) or (System.gc()) – The cause of the collection – Allocation Failure indicates that no more space was left in Eden to allocate our objects
	279616K->146232K – The occupied heap memory before and after the GC, respectively (separated by an arrow)

12. jcmd Command
	Used to send diagnostic command requests to the JVM, where these requests are useful for controlling Java Flight Recordings, troubleshoot, and diagnose JVM and Java Applications.
   
	$ jcmd <process id/main class> <command> [options]

a. To prints all performance counters in the process (All JVM Information in detail)
$ jcmd <process id/main class> PerfCounter.print 

b. Print full HotSpot and JDK version ID
$ jcmd <process id/main class> VM.version

c. Print all the system properties set for a VM. There can be several hundred lines of information displayed.
$ jcmd <process id/main class> VM.system_properties

d. Print all the flags used for a VM. Even if you have provided no flags, some of the default values will be printed, for example initial and maximum heap size.
$ jcmd <process id/main class> VM.flags

e. Print the uptime in seconds
$ jcmd <process id/main class> VM.uptime

f. Create a class histogram.
The results can be rather verbose, so you can redirect the output to a file. Both internal and application specific classes are included in the list. Classes taking the most memory are listed at the top, and classes are listed in a descending order.

$ jcmd <process id/main class> GC.class_histogram

g. Create a heap dump (hprof dump)
$ jcmd GC.heap_dump filename=Myheapdump

This is the same as using jmap -dump:file=<file> <pid>, but jcmd is the recommended tool to use.

h. Create a heap histogram. This is the same as using jmap -histo <pid>, but jcmd is the recommended tool to use.
$ jcmd <process id/main class> GC.class_histogram filename=Myheaphistogram

i. Print all threads with stack traces
$ jcmd <process id/main class> Thread.print

j. Start a recording
For example, to start a 2-minute recording on the running Java process with the identifier 7060 and save it to myrecording.jfr in the current directory, use the following:

$ jcmd <PID> JFR.start name=MyRecording settings=profile delay=20s duration=2m filename=C:\TEMP\myrecording.jfr

k. Check a recording. The JFR.check diagnostic command checks a running recording. For example:
$ jcmd <PID> JFR.check

l. Stop a recording. The JFR.stop diagnostic command stops a running recording and has the option to discard the recording data. For example:
$ jcmd <PID> JFR.stop

m. Dump a recording. The JFR.dump diagnostic command stops a running recording and has the option to dump recordings to a file. For example:
$ jcmd <PID> JFR.dump name=MyRecording filename=C:\TEMP\myrecording.jfr

13. 

14. jps -v

Ref. 
1. https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr014.html
2. https://www.baeldung.com/java-heap-dump-capture
3. https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-perf
4. https://www.baeldung.com/java-memory-leaks
5. https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr006.html
